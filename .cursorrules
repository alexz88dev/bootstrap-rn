# AllerScan Project Rules

## Environment Configuration

### Backend Environments (Only 2)

- **Development Backend**: http://localhost:3000 (local development)
- **Production Backend**: https://api.example.com (live production)

### Build Profiles (3 profiles, 2 backends)

| Profile       | Build Type         | Backend      | Use Case                                 |
| ------------- | ------------------ | ------------ | ---------------------------------------- |
| `development` | Dev Client (Debug) | Dev Backend  | Local development with hot reload        |
| `staging`     | Release Build      | Dev Backend  | Testing release builds before production |
| `production`  | Release Build      | Prod Backend | App store distribution                   |

### Important Notes

- **NO staging backend** - staging builds use the dev backend
- The "preview" profile in eas.json can be ignored or removed
- When updating configs, remember staging uses dev backend URLs

## Version Management

### Three-Tier Version System

1. **App Version** (e.g., 1.0.0)

   - User-facing version shown in app stores
   - Manually bumped via prompts when building staging or production
   - Semantic versioning (major.minor.patch)

2. **Build Number** (iOS) / Version Code (Android)

   - Auto-incremented by EAS for every build
   - Handled automatically, no manual intervention needed

3. **Runtime Version**
   - Uses `fingerprint` policy for automatic native change detection
   - Enables EAS build caching for faster builds
   - OTA updates only work within same runtime version

### Build Caching

- Fingerprint-based caching enabled for all profiles
- Reuses previous builds when native dependencies unchanged
- Significantly reduces build time and costs
- Cache keys: development-cache, staging-cache, production-cache

## Command System

### Main Interactive Commands

```bash
bun start   # Dev server OR local build
bun build   # Create EAS builds (with version management)
bun ota     # Push OTA updates
bun version # Check all version information
```

## Technology Stack

- **Package Manager**: Bun (not npm/yarn)
- **Framework**: Expo SDK 54
- **Navigation**: Expo Router
- **Build System**: EAS Build
- **Updates**: EAS Updates (OTA)

## Development Guidelines

### When working on this project:

1. Always use `bun` for package management, not npm or yarn
2. Use the 3-command system for all development workflows
3. Remember staging profile uses dev backend (not a separate staging backend)
4. All commands are interactive - follow the prompts
5. Development and staging share the same backend infrastructure

### Environment Quick Reference

```typescript
// Development: Debug build + Dev backend
APP_ENV=development → localhost:3000

// Staging: Release build + Dev backend
APP_ENV=staging → localhost:3000 (same as dev!)

// Production: Release build + Prod backend
APP_ENV=production → api.example.com
```

## Project Structure

- `/scripts` - Interactive command scripts (start.js, build.js, ota.js)
- `/config/environments` - Environment configurations
- `/ai-docs` - Project documentation
- `eas.json` - EAS Build configuration
- `app.json` - Expo app configuration

## Common Scenarios

### Daily Development

```bash
bun start → Dev server  # Existing dev client
```

### Testing Release Build

```bash
bun build → Staging → Cloud
# Release build with dev backend
```

### Production Release

```bash
bun build → Production → Cloud
# Version bump prompt (also for staging)
# Manual submission to stores required
# Build cached if no native changes
```

### Quick Fix (OTA)

```bash
bun ota → Production
# Instant JS updates
# Rollback available
```

### Feature Branch Testing

```bash
bun build → Staging → Custom channel
# Isolated testing environment
```

## Key Features

### OTA Updates

- **Publish**: Push JS updates instantly
- **Rollback**: Revert to previous version
- **Channels**: Target specific user groups
- **Custom Channels**: Feature branches, A/B testing

### Build Caching

- **Cached**: JS changes, assets, styles
- **Not Cached**: Native modules, SDK updates
- **Fingerprint**: Automatic detection

### Version Management

- **App Version**: Manual bump on staging/production
- **Build Number**: Auto-incremented
- **Runtime Version**: Fingerprint-based

---

For detailed workflows, see `/ai-docs/SCENARIOS.md`

Remember: Only 2 backends (dev & prod), but 3 build profiles for different testing scenarios.
